/*
 * Copyright (c) 2019-2021, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
// @cliArgs --board /ti/boards/CC3220SF_LAUNCHXL --rtos tirtos

/*
 *  buttonled.syscfg
 */
/* ======== Board ======== */
var board = system.deviceData.board.name;

/* ======== Components ======== */
var Components = system.deviceData.board.components;

/* ======== TIRTOS7 ======== */
if (system.getRTOS() === "tirtos7") {
    const tirtos7_release_syscfg_js = system.getScript("tirtos7_release.syscfg.js");
}

/* ======== Display ======== */
var Display = scripting.addModule("/ti/display/Display");
var display = Display.addInstance();
display.$hardware = system.deviceData.board.components.XDS110UART;

/* ======== LED ======== */
var LED = scripting.addModule("/ti/drivers/apps/LED");
var led0 = LED.addInstance();
led0.$hardware = Components.LED0;
var led1 = LED.addInstance();
led1.$hardware = Components.LED1;

/* Add PWM LEDs for boards that have one */
if(board.match(/CC32/))
{
    var led2 = LED.addInstance();
    led2.$hardware = Components.LED0_PWM;
    led2.dimmable = true;
}

/* ======== Button ======== */
var Button = scripting.addModule("/ti/drivers/apps/Button");
var button0 = Button.addInstance();
button0.$hardware = Components.BUTTON0;
var button1 = Button.addInstance();
button1.$hardware = Components.BUTTON1;

/* Set button HW configs */
if(board.match(/CC32/))
{
    button0.pull = "External";
    button0.polarity = "Active High";
    button1.pull = "External";
    button1.polarity = "Active High";
}
else
{
    button0.pull = "Internal";
    button0.polarity = "Active Low";
    button1.pull = "Internal";
    button1.polarity = "Active Low";
}
