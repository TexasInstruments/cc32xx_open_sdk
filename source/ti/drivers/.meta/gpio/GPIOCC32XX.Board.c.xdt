%%{
/*
 * Copyright (c) 2018-2021 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== GPIOCC32XX.Board.c.xdt ========
 */

    /* GPIO module passed in args[] */
    let GPIO = args[0];

    /* get ti/drivers common utility functions */
    let Common = system.getScript("/ti/drivers/Common.js");

    let instances = GPIO.$instances;

    /* generate a list of all extern references */
    let gpioInterruptPriority = Common.intPriority2Hex(GPIO.$static.interruptPriority);
    let declarations = Common.genBoardDeclarations(instances);

    let pinBounds = GPIO.getPinBounds(GPIO);
    let localPinData = GPIO.getPinData(GPIO);
    let configuredCallbacks = GPIO.getConfiguredCallbacks(instances);

    /* Remove name labels from unconfigured pins, reformat configured pins */
    for (let x in localPinData) {
        let pinData = localPinData[x];
        if (pinData.name.startsWith("DIO_")) {
            pinData.name = "";
        } else {
            pinData.name = " /* " + pinData.name + " */";
        }
    }

    for (let i = 18; i <= 21; i++) {
        localPinData[i].name = " /* Pin not available */";
        localPinData[i].config = "GPIOCC32XX_DO_NOT_CONFIG";
    }

%%}
/*
 *  =============================== GPIO ===============================
 */

#include <ti/drivers/GPIO.h>
#include <ti/drivers/gpio/GPIOCC32XX.h>

/* The range of pins available on this device */
const uint_least8_t GPIO_pinLowerBound = `pinBounds.lowest`;
const uint_least8_t GPIO_pinUpperBound = `pinBounds.highest`;

/*
 *  ======== gpioPinConfigs ========
 *  Array of Pin configurations
 */
GPIO_PinConfig gpioPinConfigs[`localPinData.length`] = {
% for (let pinData of localPinData) {
%     if (pinData.inst && pinData.inst.$ownedBy) {
    /* Owned by `pinData.inst.$ownedBy.$name` as `pinData.inst.parentSignalDisplayName` */
%     }
    `pinData.config`,`pinData.name`
% }
};

% if (configuredCallbacks.names.length > 0) {
/* Extern definitions for user callback functions */
%     for (let callback of configuredCallbacks.names) {
extern void `callback`(uint_least8_t index);
%     }

/* Called to configure any callbacks defined by sysconfig */
static void configureCallbacks(void) {
    `configuredCallbacks.calls`
}

% }
/*
 *  ======== gpioCallbackFunctions ========
 *  Array of callback function pointers
 *  Change at runtime with GPIO_setCallback()
 */
GPIO_CallbackFxn gpioCallbackFunctions[`localPinData.length`];

/*
 *  ======== gpioUserArgs ========
 *  Array of user argument pointers
 *  Change at runtime with GPIO_setUserArg()
 *  Get values with GPIO_getUserArg()
 */
void* gpioUserArgs[`localPinData.length`];

`declarations`

/*
 *  ======== GPIO_config ========
 */
const GPIO_Config GPIO_config = {
    .configs = (GPIO_PinConfig *)gpioPinConfigs,
    .callbacks = (GPIO_CallbackFxn *)gpioCallbackFunctions,
    .userArgs = gpioUserArgs,
    .intPriority = `gpioInterruptPriority`
};
