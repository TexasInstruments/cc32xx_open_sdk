%%{
/*
 * Copyright (c) 2020-2023 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== Clock_config_h.xdt ========
 */

    /* passed by /ti/sysbios/BIOS_config.c.xdt */
    let Clock = args[0];

    let BIOS = system.modules["/ti/sysbios/BIOS"];

    let clockSwiPriority = Clock.$static.swiPriority;

    if (!BIOS.$static.disableSwi) {
        let Swi = system.modules["/ti/sysbios/knl/Swi"];
        /* limit Clock.swiPriority to be less than Swi.numPriorities */
        if (!(Clock.$static.swiPriority < Swi.$static.numPriorities)) {
            clockSwiPriority = Swi.$static.numPriorities - 1;
        }
    }

    /* instrumentation */
    let logD = 0; // BIOS.$static.clockLogs.map(x => "#define Clock_log" + x + "_D");
%%}
/* Clock module definitions */

#define Clock_swiPriority_D `clockSwiPriority`
#define Clock_tickSource_D `Clock.$static.tickSource`
#define Clock_tickMode_D `Clock.$static.tickMode`
#define Clock_tickPeriod_D `Clock.$static.tickPeriod`
%
% if (logD.length > 0) {

#define Clock_log_D
% for (let i = 0; i < logD.length; i++) {
`logD[i]`
% }
% }
