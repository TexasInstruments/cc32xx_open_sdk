%%{
/*
 * Copyright (c) 2020-2023 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== TaskHooks_config_c.xdt ========
 */

    /* passed by /ti/sysbios/BIOS_config.c.xdt */
    let TaskHooks = args[0];
    let instances = TaskHooks.$instances;
%%}
% if (instances.length != 0) {
/* TaskHooks module definitions */

%   for (let i = 0; i < instances.length; i++) {
/* Task HookSet `i` */
%       let inst = instances[i];
%       if (instances[i].registerFxn != "NULL") {
extern void `instances[i].registerFxn`(int);
%       }
%       if (instances[i].createFxn != "NULL") {
extern void `instances[i].createFxn`(Task_Handle, Error_Block *);
%       }
%       if (instances[i].readyFxn != "NULL") {
extern void `instances[i].readyFxn`(Task_Handle);
%       }
%       if (instances[i].switchFxn != "NULL") {
extern void `instances[i].switchFxn`(Task_Handle, Task_Handle);
%       }
%       if (instances[i].exitFxn != "NULL") {
extern void `instances[i].exitFxn`(Task_Handle);
%       }
%       if (instances[i].deleteFxn != "NULL") {
extern void `instances[i].deleteFxn`(Task_Handle);
%       }

%   }
const Task_HookSet TaskHooks_array[`instances.length`] = {
%   for (let i = 0; i < instances.length; i++) {
%       let inst = instances[i];
    /* HookSet `i` */
    {
        `instances[i].registerFxn`,
        `instances[i].createFxn`,
        `instances[i].readyFxn`,
        `instances[i].switchFxn`,
        `instances[i].exitFxn`,
        `instances[i].deleteFxn`
    },
%   }
};
% }
