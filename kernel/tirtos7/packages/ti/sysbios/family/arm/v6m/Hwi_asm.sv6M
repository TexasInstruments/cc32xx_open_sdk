;
;  Copyright (c) 2020, Texas Instruments Incorporated
;  All rights reserved.
;
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions
;  are met:
;
;  *  Redistributions of source code must retain the above copyright
;     notice, this list of conditions and the following disclaimer.
;
;  *  Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in the
;     documentation and/or other materials provided with the distribution.
;
;  *  Neither the name of Texas Instruments Incorporated nor the names of
;     its contributors may be used to endorse or promote products derived
;     from this software without specific prior written permission.
;
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
;  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
;  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
;  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
;  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
;  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
;  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;
;
; ======== Hwi_asm.sv6M ========
;
;

        .cdecls C,NOLIST,"Hwi.h"

        .thumb

        .global ti_sysbios_family_arm_v6m_Hwi_doSwiRestore
        .global ti_sysbios_family_arm_v6m_Hwi_doTaskRestore
        .global ti_sysbios_family_arm_v6m_Hwi_dispatchC
        .global ti_sysbios_family_arm_v6m_Hwi_dispatch
        .global ti_sysbios_family_arm_v6m_Hwi_pendSV
        .global ti_sysbios_family_arm_v6m_Hwi_excHandlerAsm
        .global ti_sysbios_family_arm_v6m_Hwi_excHandler
        .global ti_sysbios_family_arm_v6m_Hwi_return

        .global NOROM_CPUcpsid
        .global NOROM_CPUcpsie
        .global NOROM_SetupTrimDevice

ti_sysbios_family_arm_v6m_Hwi_Module_state .tag ti_sysbios_family_arm_v6m_Hwi_Module_State

;
; Here on all dispatched interrupts
;

        .sect ".text:ti_sysbios_family_arm_v6m_Hwi_dispatch"
        .clink
        .thumbfunc ti_sysbios_family_arm_v6m_Hwi_dispatch

ti_sysbios_family_arm_v6m_Hwi_dispatch:
        .asmfunc

;
; get IRP
; If this hwi switched to MSP then IRP is on PSP stack
; else if this is a nested interrupt then IRP is on current MSP stack
;
        mov     r1, lr
        movs    r2, #4
        tsts    r1, r2          ; context on PSP?
        mov     r2, sp          ; assume no, use MSP
        beq     $11
        mrs     r2, psp         ; if yes, then use PSP

$11
        ldr     r0, [r2, #24]   ; get IRP (2nd of 8 items to be pushed)

        push    {r1}            ; save EXC_RETURN

        ldr     r1, dispatchAddr
        blx     r1              ; pass IRP to ti_sysbios_family_arm_v6m_Hwi_dispatchC()
                                ; dispatcher returns swi and task keys in r0

; Here on return from dispatcher, r0 = swiKey+tskKey, interrupts disabled
        ldr     r2, swiTaskKeyAddr
        ldr     r1, [r2]
        ands    r0, r1, r0
        str     r0, [r2]

        pop     {r1}            ; restore EXC_RETURN
        movs    r2, #8
        tsts    r1, r2          ; returning to thread mode?
        bne     $2              ; branch if lowest order interrupt

;
; return now, no further processing on nested interrupts
;
; This is normal when:
;  1) this is a nested interrupt,
;  2) the Task scheduler has been disabled by the interrupted task thread
;  3) this is a Swi-only system
;
        cpsie   i               ; re-enable interrupts
        bx      r1              ; return from interrupt

;
; Here when no other interrupt is pending
; perform a dummy EXC_RETURN to return to thread mode before
; running the Swi and Task schedulers
;
$2
        movs    r2, #4
        tsts    r1, r2          ; context on PSP?
        beq     $21
        mrs     r2, psp         ; if yes, then use PSP
        subs    r2, #(8*4)      ; make room for dummy
        msr     psp, r2         ; update PSP
        br      $22
$21
        mov     r2, sp          ; else use MSP
        subs    r2, #(8*4)      ; make room for dummy
        mov     sp, r2          ; update MSP

; copy saved swi and task keys into interrupt context

$22
        ldr     r3, swiTaskKeyAddr
        ldr     r0, [r3]
        str     r0, [r2]        ; tskkey pops into r0
        ldr     r0, swiTaskKeyDefault
        str     r0, [r3]        ; re-init swiTaskKey
        ldr     r0, dummyPSR    ; dummy xPSR with T bit set
        str     r0, [r2, #28]
        ldr     r0, $1Addr
        str     r0, [r2, #24]
        bx      r1              ; EXC_RETURN to $1 below

;
; Now we're back in thread mode and could be running on the task stack
; or the ISR stack.
;
; If an ISR hit while a Swi posted from an ISR was running, we'll be on the ISR stack.
; Otherwise we'll be on the pre-empted Task stack.
;
;       r0 = swiTaskKey
;       r1 = old basepri
;
; Call Swi and Task schedulers
;
$1
        push    {r0}            ; push copy of swiTaskKey

        mrs     r1, control     ; on ISR stack already?
        cmp     r1, #0
        beq     $12
        movs    r2, #0          ; no,
        msr     control, r2     ; switch to ISR stack

$12
        push    {r1}            ; push old control reg onto ISR stack (MSP)
        push    {r1}            ; dummy to force 8 byte stack align

        ldr     r1, doSwiRestoreAddr
        blx     r1              ; pass swiTaskKey (r0) to ti_sysbios_family_arm_v6m_Hwi_doSwiRestore()

        pop     {r0}            ; pop dummy
        pop     {r0}            ; pop old control register

        cmp     r0, #0          ; lowest order ISR?
        beq     $13
        movs    r1, #2          ; if yes
        msr     control, r1     ; switch back to Task stack (PSP)

$13
        pop     {r0}            ; pop copy of swiTaskKey
        ldr     r1, doTaskRestoreAddr
        blx     r1              ; pass swiTaskKey to ti_sysbios_family_arm_v6m_Hwi_doTaskRestore()
                                ; current task may be pre-empted here
;
; Here on return from doTaskRestoreHwi() with ints disabled.
;
; Extra care must be taken now to ensure that we completely unwind
; to the originally interrupted background thread without allowing
; any more dispatched interrupts. Otherwise the BIOS promise of no
; more than 2 (dispatched) interrupt contexts on a Task stack can be
; broken.
;
; In order to achieve this feat, we first post the pendSV interrupt
; which is configured with the same priority level as ti_sysbios_family_arm_v6m_Hwi_disable().
; Then we re-enable interrupts. This will cause an immediate pendSV
; exception to be taken which is still at ti_sysbios_family_arm_v6m_Hwi_disable() priority.
; We then blow off the pendSV stack contents and return to the
; background thread at the normal priority level.
;
        ldr     r0, nvic_icsr   ; point to ti_sysbios_family_arm_v6m_Hwi_nvic.ICSR
        ldr     r1, pendSvBit
        str     r1, [r0]        ; post a pendSV interrupt

; CAUTION!!! Do NOT single step thru the next instruction
; else, the processor won't arrive at pendSV thru the
; exception mechanism.

        cpsie   i               ; allows pendSV to happen
        nop                     ; 2 nops required for prefetch
        nop                     ;
        .endasmfunc

swiTaskKeyDefault
        .word   0x00000101
dummyPSR
        .word   0x01000000
pendSvBit
        .word   0x10000000
nvic_icsr:
        .word   0xe000ed04
dispatchAddr:
        .word   ti_sysbios_family_arm_v6m_Hwi_dispatchC
doSwiRestoreAddr:
        .word   ti_sysbios_family_arm_v6m_Hwi_doSwiRestore
doTaskRestoreAddr:
        .word   ti_sysbios_family_arm_v6m_Hwi_doTaskRestore
swiTaskKeyAddr:
        .word   ti_sysbios_family_arm_v6m_Hwi_Module_state.swiTaskKeys
$1Addr:
        .word   $1

        .sect ".text:ti_sysbios_family_arm_v6m_Hwi_pendSV"
        .clink
        .thumbfunc ti_sysbios_family_arm_v6m_Hwi_pendSV
ti_sysbios_family_arm_v6m_Hwi_pendSV:
        .asmfunc
        mov     r1, lr
        movs    r2, #4
        tsts    r1, r2          ; context on PSP?
        beq     $1
        mrs     r2, psp         ; if yes, then use PSP
        adds    r2, #(8*4)      ; blow off pendSV stack
        msr     psp, r2
        bx      r1              ; return into task, re-enables ints
$1
        mov     r2, sp          ; else use MSP
        adds    r2, #(8*4)      ; blow off pendSV stack
        mov     sp, r2
ti_sysbios_family_arm_v6m_Hwi_return:
        bx      r1              ; return into task, re-enables ints

        .endasmfunc

        .sect ".text:ti_sysbios_family_arm_v6m_Hwi_excHandlerAsm"
        .clink
        .thumbfunc ti_sysbios_family_arm_v6m_Hwi_excHandlerAsm

ti_sysbios_family_arm_v6m_Hwi_excHandlerAsm:
        .asmfunc
        mov     r1, lr
        movs    r2, #4
        tsts    r1, r2          ; context on PSP?
        beq     $1              ; if not, use SP
        mrs     r0, psp         ; else, if yes, then use PSP
        mov     sp, r0
$1
        mov     r3, r11
        mov     r2, r10
        mov     r1, r9
        mov     r0, r8

        push    {r0-r3}
        push    {r4-r7}         ; save r4-r11 while we're at it
        mov     r0, sp          ; pass sp to exception handler
        mov     r1, lr          ; pass lr too

        ldr     r2, excHandlerAddr
        bx      r2

excHandlerAddr:
        .word          ti_sysbios_family_arm_v6m_Hwi_excHandler
        .endasmfunc

NOROM_CPUcpsid:
        .asmfunc
        movs    r0,#1
        msr     PRIMASK, r0
        bx      lr
        .endasmfunc

NOROM_CPUcpsie:
        .asmfunc
        movs    r0,#0
        msr     PRIMASK, r0
        bx      lr
        .endasmfunc

NOROM_SetupTrimDevice:
        .asmfunc
        bx      lr
        .endasmfunc

        .end
